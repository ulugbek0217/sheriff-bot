// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: accounts.sql

package db

import (
	"context"
)

const accountsQuantity = `-- name: AccountsQuantity :one
SELECT COUNT(*) FROM accounts
`

func (q *Queries) AccountsQuantity(ctx context.Context, db DBTX) (int64, error) {
	row := db.QueryRow(ctx, accountsQuantity)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAccount = `-- name: CreateAccount :exec
INSERT INTO accounts (
    user_id, first_name, last_name, username, phone, about, birthday, personal_channel_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) ON CONFLICT (user_id) DO NOTHING
`

type CreateAccountParams struct {
	UserID            int64  `json:"user_id"`
	FirstName         string `json:"first_name"`
	LastName          string `json:"last_name"`
	Username          string `json:"username"`
	Phone             string `json:"phone"`
	About             string `json:"about"`
	Birthday          string `json:"birthday"`
	PersonalChannelID string `json:"personal_channel_id"`
}

func (q *Queries) CreateAccount(ctx context.Context, db DBTX, arg CreateAccountParams) error {
	_, err := db.Exec(ctx, createAccount,
		arg.UserID,
		arg.FirstName,
		arg.LastName,
		arg.Username,
		arg.Phone,
		arg.About,
		arg.Birthday,
		arg.PersonalChannelID,
	)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT user_id, first_name, last_name, username, phone, about, birthday, personal_channel_id, created_at FROM accounts
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, db DBTX, userID int64) (Account, error) {
	row := db.QueryRow(ctx, getAccount, userID)
	var i Account
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Phone,
		&i.About,
		&i.Birthday,
		&i.PersonalChannelID,
		&i.CreatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT user_id, first_name, last_name, username, phone, about, birthday, personal_channel_id, created_at FROM accounts
ORDER BY created_at
LIMIT $1
OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, db DBTX, arg ListAccountsParams) ([]Account, error) {
	rows, err := db.Query(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Username,
			&i.Phone,
			&i.About,
			&i.Birthday,
			&i.PersonalChannelID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
